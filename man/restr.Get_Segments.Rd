% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/restr.Get_Segments.R
\name{restr.Get_Segments}
\alias{restr.Get_Segments}
\title{restr.Get_Segments (IN PROCESS OF BEING REPLACED)}
\usage{
restr.Get_Segments(x, merge_rules = TRUE, ...)
}
\arguments{
\item{x}{A call return from \code{call.Get_Segments()}}

\item{merge_rules}{logi. Should the function return a list of \code{data.table}s? Defaults to \code{TRUE}}

\item{...}{Additional named args to pass to parse functions. Should not normally be needed. See notes}
}
\value{
Depending on the values passed to \emph{collapse_rules} and \emph{bind_rules} (via \code{...}),
a list of outputs of varying lengths. With default settings, \code{list} of two \code{data.table}s:
\enumerate{
    \item{\emph{segment_meta}: Segment-level metadata}
    \item{\emph{defn}: Rule-level data}
}
Records across both list elements are uniquely identified by the \emph{segment_id} field, for 
easy joining, if desired.
}
\description{
Restructure the return from a call to Segments.Get, via call.Get_Segments. Currently does NOT work
properly for nested containers or stacked segments! Much more work required, but this suffices 
for the most basic cases.
}
\details{
\strong{The function below is being deprecated; a set of updated functions have been written and will be 
stitched together to fix several deficiencies present in this first version}.
}
\note{
At the moment, \code{...} can be used to pass \emph{collapse_rules} and \emph{bind_rules} (logi) 
args to the helper \code{.parse_container()} function. This is primarily useful for debugging purposes. 
Note that if \emph{merge_rules} is \code{TRUE}, this overrides both of the aforementioned arguments. 

The following points denote known limitations, all of which will be resolved before this function is
considered complete:

\itemize{
\item{
This function does NOT YET properly parse rules for nested containers, nor stacked segments. A 
workaround is in progress for nested containers, but support for parsing stacked segments will take
some time, and there is no guarantee that this will be possible.
    \itemize{
    \item{
    It is possible to create, in the GUI, segments that are nested incorrectly and/or
    are fundamentally flawed. There is no guarantee that even when completed, this function will parse
    such segments.
    }
    }
    }
\item{
At the moment, segments that cannot be successfully parsed have their metadata passed through, 
and an error is logged. This is reflected in the \emph{defn} table, in the field \emph{error}. 
If you do not see such a column in the \emph{defn} table, this means no errors were triggered;
furthermore, in the case of errors, a message is printed denoting the \code{segment_id}(s) that
were not properly parsed.

In the future, this behavior may change, i.e. do not rely on the presence or absence of a field
called \emph{error} as a mechanism to track errors.
}
\item{
There is NO mechanism (YET) to handle returns from \code{call.Get_Segments()} where the 
\emph{fields} argument does not include \code{definition}. This is an easy fix and will be addressed
shortly.
}
\item{
Extraction of other nested fields, including \code{tags}, \code{shares}, and \code{compatibility}
is not yet in place, so if you request such fields, they will be dropped. This is also an easy fix, and
will be addressed with high priority
}
}

In summary: This is definitely not a complete function yet; you have been warned.
}
\examples{
#Forthcoming
}

