% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Classifications_CreateExport.R
\name{Classifications_CreateExport}
\alias{Classifications_CreateExport}
\title{Create an export job for SAINT classifications}
\usage{
Classifications_CreateExport(date_filter_start_date = NULL,
  date_filter_end_date = NULL, element = NULL, rsid_list = NULL,
  email_address = NULL, row_count = "", encoding = "UTF-8",
  all_rows = TRUE, quote_output = TRUE, row_filter_column_name = "",
  row_filter_column_value = "", row_filter_empty_column = "",
  campaign_filter_end_date = "", campaign_filter_start_date = "")
}
\arguments{
\item{date_filter_start_date}{(required) The start month and year. See Notes for possible format restrictions.}

\item{date_filter_end_date}{(required) The end month and year. See Notes for possible format restrictions.}

\item{element}{(required) The element id. Must be a valid (Classification-enabled) element within the scope of the
report suite(s).}

\item{rsid_list}{(required) One or more report suite id(s). This is the only parameter that accepts vectors of length >1.
May be supplied as an atomic vector or list, and if the latter, will be flattned.}

\item{email_address}{(required) A valid email address to send the processing status notification to.}

\item{row_count}{(optional) The maximum number of rows to return. Overridden if \emph{all_rows} is \code{TRUE}, which is the 
default for that parameter. Defaults to \code{1000} (this is enforced by the server)}

\item{encoding}{(optional) File encoding. Likely restricted to certain allowed values, and defaults to \code{UTF-8}}

\item{all_rows}{(optional) Return all available rows? Overrides \emph{row_count} if set to \code{TRUE}, which is the default.
Setting this to \code{FALSE} and failing to provide a value to \emph{row_count} restricts the number of rows to the 
server default of \code{1000}.}

\item{quote_output}{(optional) Should outputs be quoted? Defaults to \code{TRUE}}

\item{row_filter_column_name}{(optional) The classification field name to filter by. Does nothing if a valid value is not passed
to \emph{row_filter_column_value}}

\item{row_filter_column_value}{(optional) The value to filter by, based on the \emph{row_filter_column_name}.}

\item{row_filter_empty_column}{(optional) Can be set to one of a set of possible values. See Details.}

\item{campaign_filter_end_date}{(optional) The campaign start date. Off by default. See Details for allowed values.}

\item{campaign_filter_start_date}{(optional) The campaign end date.}
}
\value{
A \code{list} of length 1, containing the \emph{job_id} \code{integer}.
}
\description{
Instantiate an export request to pull classified values from one or more report suites
}
\details{
This function is the first step when you wish to download classified data, 
provided you know the element (id) and one or more valid report suites. The
functionality replicates the browser export option in the UI. 

The call accepts arguments of length 1 for all parameters except for 
\emph{rsid_list}. Furthermore, the endpoint expects empty values (but still keys)
for all parameters, even though not all parameters are actually required. As a 
result, this function ensures that the minimally required parameters are supplied,
supplies server defaults where relevant, and passes blank values for optional 
parameters. 

Note that the \emph{row_filter} parameters have some nuances in the values and
combinations they expect. See examples for the most common use case (returning
only non-null rows based on a known classification field). See \code{\link{Classifications_GetFilters}}
for the method to figure out what possible filter values are.

Per the documentation, \emph{row_filter_empty_column} can take one of the following:

\itemize{
\item \code{::all::} - Returns rows that have all columns empty.
\item \code{::any::} - Returns rows that have 1 or more empty column.
\item Any column name - Returns rows where the given column is empty.
}


Per the documentation, \emph{campaign_filter_end_date} can take one of the following:

\itemize{
\item \code{::all::}
\item \code{::active::}
}

...to filter by all campaigns, or by only active ones.
}
\note{
Though not specified in the documentation, it appears that the string format for 
date filters is expected to be a three-letter month abbreviation followed by the four-digit year. 
In other words, \emph{Jun 2017} as opposed to \emph{June 2017}.
}
\section{Access Privileges}{
 
This function calls an Adobe Analytics method that requires administrative/elevated privileges for
some or all functionality.
}

\examples{
\dontrun{
# A basic request
Classifications_CreateExport(
    date_filter_start_date = "Jan 2017", 
    date_filter_end_date = "Nov 2017", 
    element = "evar16", 
    email_address = "my_email@xyz.com", 
    rsid_list = list("my_rsid_1")
    )
    
# Using row_filter to only return non-null rows based on that column
Classifications_CreateExport(
    date_filter_start_date = "Jan 2017", 
    date_filter_end_date = "Nov 2017", 
    element = "evar16", 
    email_address = "my_email@xyz.com", 
    rsid_list = list("my_rsid_1"), 
    row_filter_column_name = "some_valid_classification_field_name", 
    row_filter_column_value = ".*",
    all_rows = TRUE
    )
    
# Also limit to only 100 rows max; must set all_rows to FALSE
Classifications_CreateExport(
    date_filter_start_date = "Jan 2017", 
    date_filter_end_date = "Nov 2017", 
    element = "evar16", 
    email_address = "my_email@xyz.com", 
    rsid_list = list("my_rsid_1"), 
    row_filter_column_name = "some_valid_classification_field_name", 
    row_filter_column_value = ".*",
    all_rows = FALSE, 
    row_count = 100
    )
}
}
\seealso{
Other Classifications methods: \code{\link{CheckExportJobStatus}},
  \code{\link{Classifications_GetElements}},
  \code{\link{Classifications_GetFilters}},
  \code{\link{Classifications_GetStatus}},
  \code{\link{Classifications_GetTemplate}},
  \code{\link{WriteTemplate}}
}
