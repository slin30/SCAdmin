% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flatten_nested_defn.R
\name{flatten_nested_defn}
\alias{flatten_nested_defn}
\title{Flatten a nested definition return}
\usage{
flatten_nested_defn(x, d = 0L, out = list())
}
\arguments{
\item{x}{The return from a call to Segments.Get with a named element of \emph{definition}}

\item{d}{Internal counter to track recursion iterations}

\item{out}{Accumulator for results}
}
\value{
A list, currently taking one of two possible patterns, both of which apply to single
homogeneous cases:

Nested rules, i.e. a definiton where \emph{rules} is nested within \emph{containers}, 
will return a list of length 2, with named elements of \code{res,rules}. 

Nested containers, i.e. a definitions where \emph{container} is nested within \emph{rules}, 
will return a list of length \emph{n}, where \emph{n} is the number of nested containers. 

Stacked segments are not meaningfully parsed, but they are flattened into a more readable 
structure (for now).
}
\description{
Flatten the definition return data structure for nested container(s) and rule(s)
}
\note{
This is not yet complete. There are several helper functions that are not exported, and this
function may not be exported when final, and instead wrapped in a public-facing function with
more consistent return structures and more error checking.
}
\examples{
# TBD
}
