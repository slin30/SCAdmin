% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_element_rules.R
\name{make_element_rules}
\alias{make_element_rules}
\title{Expand a vector of rules into scalar list-sets}
\usage{
make_element_rules(element, operator, rules, classification = NULL,
  trim = FALSE, dedupe = FALSE)
}
\arguments{
\item{element}{(Required) A character vector. Must be a valid element (id) within access rights of your account}

\item{operator}{(Required) A character vector. For elements-based rules, the API defines allowable values. See details.}

\item{rules}{(Required) A character vector; if not, will be coerced via \code{as.character}}

\item{classification}{(Optional) A character vector of length 1. Element classification to segment, i.e. the name of the 
classification as returned from \code{\link[RSiteCatalyst]{GetClassifications}}}

\item{trim}{(Optional) logi. Should leading and trailing whitespace(s) be removed from \emph{rules}? Defaults to \code{FALSE}}

\item{dedupe}{(Optional) logi. Should input \emph{rules} be de-duplicated? Defaults to \code{FALSE}}
}
\value{
A list of \code{length(rules)}, which may be passed to \code{\link{make_segment_container}}. 

The length of the output will equal the length after whitespace-trimming and/or de-duplication
if \emph{trim} and/or \emph{dedupe} are \code{TRUE}, and if so, actions are performed by 
\code{str_trim} and \code{unique}, respectively.
}
\description{
For the common single element, single operator, many rules use case (and more)
}
\details{
This function is only meant to be used for \emph{operator}-based rules, and NOT \emph{container}-based
rules. If you do not know what this means, please see:
\href{https://marketing.adobe.com/developer/documentation/segments-1-4/r-segment-rule#reference_62E104F8CA1C42819B9715CDDDD61E31}{Adobe documentation}
 
This function does NOT support the following arguments:

\itemize{
\item \preformatted{after}
\item \preformatted{within}
\item \preformatted{exclude}
}
}
\note{
Inputs to \emph{element} and \emph{operator} of length > 1 are allowed, with constraints. Checks are in place to 
prevent ambiguous combinatons of lengths for these two arguments in conjunction with \emph{rules}. This makes it 
possible to create certain combinations of element, operator, and rule, where only one of the three variables is
variant.

If, however, \emph{classification} is provided, \emph{element} must be a vector of length 1, i.e. 
a non-\code{NULL} value for \emph{classification} means that only one of \emph{operator} OR \emph{rules} can be
a vector of length > 1.
}
\examples{
##Any one arg can be of length > 1, as long as other two are length 1
# single element, single operator, many rules:
make_element_rules("element_1", "equals", LETTERS[1:3])

# multiple elements, single operator, single rule:
make_element_rules(c("element_1", "element_2", "element_3"), "equals", LETTERS[1])

# single element, multiple operators, single rule:
make_element_rules("element_1", c("equals", "contains", "contains_any"), LETTERS[1])

##Can have two args > length 1 as long as they are same length AND third arg is length 1
# single element, multiple same-length operator and rule:
make_element_rules("element_1", 
                   c("equals", "contains", "contains_any"), 
                   LETTERS[1:3]
)

##Or all args can be of length > 1, if same length:
make_element_rules(c("element_1", "element_2", "element_3"), 
                   c("equals", "contains", "contains_any"), 
                   LETTERS[1:3]
)
}
\seealso{
Other make_segment functions: \code{\link{make_segment_body}},
  \code{\link{make_segment_container}},
  \code{\link{make_segment_meta}},
  \code{\link{make_sharelist}}
}
