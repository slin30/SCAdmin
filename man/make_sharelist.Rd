% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_sharelist.R
\name{make_sharelist}
\alias{make_sharelist}
\title{Make a nested list of shares to append into segment meta}
\usage{
make_sharelist(type, name, as_df = FALSE)
}
\arguments{
\item{type}{A character vector denoting whether \emph{name} is for a \code{group} or \code{user}}

\item{name}{A character vector denoting the name of the \code{group} or \code{user} as denoted in \emph{type}}

\item{as_df}{Logical; should the return be a list (default; \code{FALSE}) or a \code{data.frame}? Usually
this should be left alone, unless you specifically need a more human-viewable temporary data structure}
}
\value{
By default, a nested \code{list} of length \emph{name} with two named elements, with all
values of class \code{scalar} (\code{character}):

\itemize{
\item \preformatted{type}
\item \preformatted{name}
}

If \code{as_df = TRUE}, then a \code{data.frame} with fields \code{type,name}, with as many rows as 
\code{length(name)}. As is the case for the default output, all values in both fields will be of
class \code{scalar} (\code{character}).
}
\description{
Create an array of shares per Segments.Save method data structure requirements, with checks
}
\details{
The actual data structure for \emph{shares} is quite simple, so this is definitely a helper function, and is
likely most useful when you need to create long lists of shares, and/or you have a complex mix of 
\emph{type}, perhaps e.g. stored in tabular format. 

\emph{type} is the constraining input in terms of allowable lengths. The assumption is that most 
typically, there will be a single value for \emph{type}. Since this is not always true, this function
allows \emph{type} to be either a vector of length 1 OR a vector of length equal to \emph{name}.
}
\note{
See example for a quick mechanism to quickly convert a \code{data.frame} output (from this function) 
into (or, rather, back into) a list.
}
\examples{
make_sharelist(type = c("user"), name = sample(LETTERS, 10))
\dontrun{
make_sharelist(type = c("user", "group"), name = sample(LETTERS, 10)) #error
make_sharelist(type = c("User"), name = sample(LETTERS, 10)) #also error

# no error, demo of df use case
my_shares_df <- make_sharelist(type = c("user"), 
  name = sample(LETTERS, 1e3, replace = TRUE), 
  as_df = TRUE
) 
back_list <- vector("list", nrow(my_shares_df))
for(i in seq_len(nrow(my_shares_df))) {
  back_list[[i]] <- as.list(my_shares_df[i, ])
  back_list[[i]] <- Map(jsonlite::unbox, back_list[[i]])
}
}
}
\seealso{
Other make_segment functions: \code{\link{make_element_rules}},
  \code{\link{make_segment_body}},
  \code{\link{make_segment_container}},
  \code{\link{make_segment_meta}}
}

